CAPÍTULO 2 – ESTRUTURA DA APLICAÇÃO 

Estrutura com create-react-app 

Create-react-app é um pacote criado pelo próprio time do react, já vem com o Webpack, TypeScript e Babel configurados, 
talvez tenha que mudar uma coisa ou outra. 

Dou o comando yarn create react-app “nomedaaplicação” --template typescript

Arquivo index.html: excluo abaixo do segundo meta até antes do title. Incluo um title. Excluo o comentário. 

Pasta public: deleto todos os arquivos, menos o index.html.

Pasta src: deixo o arquivo App.tsx, index.tsx e react-app-env.d.ts. 

react-app-env.d.ts: esse arquivo traz algumas tipagens do typescript para o projeto. 

Arquivo index.tsx: removo importação do css e do ReportWebVitals. Tiro o comentário e a escrita abaixo dele. 

Arquivo App.tsx: removo a importação do react e do svg. Tiro todo o conteúdo de dentro, deixo apenas a div className=”App”.
Tiro export default, coloco o export antes da function.

Uso export antes da função para que quando alguém for importar o componente, não consiga mudar o nome dele na 
importação.

Toda configuração do webpack, babel, etc não fica visível no projeto. Ela fica dentro de um pacote chamado 
react-scripts.

No arquivo package.json: vou nas dependências, recorto todos os testings, types até typeScript e colo abaixo como dependên
cia de desenvolvimento (“devDependencies”).  

EXPORTANDO ASSETS DO FIGMA

Exporto em formato svg as “coisas” do Figma, esse formato é considerado o melhor para Web. Só não exporto assim se for uma
 foto, por exemplo.
 
Vou colocando os downloads dentro da pasta Src > assets (crio uma pasta chamada assets). 

Favicon sempre salvo como png. Este arquivo vai dentro da pasta onde consta o índice, pois ele é considerado um arquivo 
público do projeto. 


INSTALANDO STYLED COMPONENTS

Comando: yarn add styled-components

Faço a importação no arquivo App. Instalo o pacote adicional que o VS Code me sugere. 
yarn add @types/styled-components –D

Baixo essa extensão: vscode-styled-components para que o vs entenda o que é CSS. 

Vou criar um componente para fazer a parte de estilização da minha página. Coloco a tag com o nome do componente onde quero.

import styled from 'styled-components'

const Title = styled.h1 `
    color: #8257e6;
`
export function App() {
  return (
    <div className="App">
        <Title>Hello World</Title>
    </div>
  );
}

Detalhe que aqui se criar a estilização dentro do componente, essa não será usado nos demais componentes. 
O código acaba ficando mais organizado. 

CRIANDO ESTILOS GLOBAIS

Lembrar de incluir o favicon no index.html. 
    <link rel="shortcut icon" href="favicon.png" type="image/png">

Crio uma pasta chamada styles dentro do src, crio um arquivo chamado global.ts.

Estilos globais: é o que toda a aplicação usa.

Criei uma variável para a cor de fundo da página. 

Depois das estilizações no arquivo dos styles, faço a importação dele no arquivo App. 

Yarn start para rodar a tela. 

Coloco as fontes em percentuais para se adaptar a qualquer dispositivo, se colocar fixo o tamanho em px, por exemplo,
não vai se adaptar às preferências do usuário se ele tiver uma letra maior ou menor no dispositivo. 

REM = 1 rem = font-size da minha página

max-width: 1080px = quando o usuário estiver em uma tela com até 1080px

FONTES DO GOOGLE FONTS 

Seleciono o tamanho que quero, clico na opção de baixar via link, copio o link e colo no index.html.
O link preconnect preciso por bem no início do html.

COMPONENTIZAÇÃO

COMPONENTE: HEADER 

Crio a pasta components, e crio a pasta do meu componente com o arquivo index.tsx.

Importo o Header dentro do App.

Crio o arquivo style para estilizar cada componente. 

Quando não tem html dentro do arquivo, não preciso cria-lo como .tsx, posso por só como ts. 

importo import styled from "styled-components";

&:hover{
            filter: brightness(0.9);
        }
propriedade filter é muito boa para ser usada no css. brightness dá uma escurecida quando passa o mouse 

abaixo estou informando que quando for o primeiro td, quero essa estilização 
&:first-child {
    color: var(--text-title);
}

CONSUMINDO API

CRIANDO FRONT-END SEM BACK-END 

JSON SERVER: Cria uma API fake - não usaremos pois ela não executa junto com a aplicação, tem que baixar coisas.

MIRAGE JS: é o que tem mais funcionalidades, por isso utilizaremos ele. 

MSW: é boa mas não tem todas as features como a Mirage.


CONFIGURANDO MIRAGEJS

dou o comando yarn add miragejs

importo ele dentro do arquivo index.tsx global: import { createServer } from 'miragejs';


CONFIGURANDO CLIENTE DO AXIOS 

Dou o comando yarn add axios

Crio service e incluo as informações no componente que vai precisar desse service


MODAL E FORMS 

CONFIGURANDO MODAL DE CRIAÇÃO

dou o comando yarn add react-modal 

Vou onde quero criar o modal, faço as funções, importo o modal, dou esse comando conforme sugestão do VS Code: yarn add @types/react-modal -D


COMPONENTE NEWTRANSACTIONMODAL 

ESTRUTURA DO FORMULÁRIO

Overlay: parte preta do Modal, o que fica fora quando ele está aberto 

yarn add polished, baixa um pacote em que consigo manipular as cores através do JS

importei para dentro do arquivo de estilização a opção darken, para que escureça a borda 

